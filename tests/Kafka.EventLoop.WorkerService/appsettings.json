{
  "Logging": {
    "LogLevel": {
      "Default": "Debug",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "TestSettings": {
    "ConnectionString": "",
    "FooTopic": "foo-topic",
    "FooTopicPartitionCount": 10,
    "BarTopic": "bar-topic",
    "BarTopicPartitionCount": 10,
    "BarDeadLettersTopic": "bar-dead-letters-topic",
    "BarDeadLettersTopicPartitionCount": 1
  },
  "Kafka": {
    "ConsumerGroups": [
      {
        "GroupId": "foo-group",
        "ConnectionString": "foo-host",
        "TopicName": "foo-topic",
        "AutoOffsetReset": "Earliest",
        "ParallelConsumers": 1,
        "Intake": {
          "MaxSpeed": 10,
          "Strategy": {
            "Name": "MaxSizeWithTimeout",
            "MaxSize": 1000,
            "TimeoutInMs": 5000
          }
        },
        "ErrorHandling": {
          "Critical": {
            "StopConsumer": true
          },
          "Transient": {
            "RestartConsumerAfterMs": 5000
          }
        }
      },
      {
        "GroupId": "bar-group",
        "ConnectionString": "bar-host",
        "TopicName": "bar-topic",
        "ParallelConsumers": 1,
        "Intake": {
          "MaxSpeed": 50,
          "Strategy": {
            "Name": "FixedInterval",
            "IntervalInMs": 5000
          }
        },
        "ErrorHandling": {
          "Critical": {
            "DeadLettering": {
              "ConnectionString": "bar-host",
              "TopicName": "bar-dead-letters-topic"
            }
          },
          "Transient": {
            "RestartConsumerAfterMs": 5000
          }
        }
      },
      {
        "GroupId": "bar-dead-letters-group",
        "ConnectionString": "bar-host",
        "TopicName": "bar-dead-letters-topic",
        "ParallelConsumers": 1,
        "Intake": {
          "MaxSpeed": 1,
          "Strategy": {
            "Name": "FixedSize",
            "Size": 1
          }
        },
        "ErrorHandling": {
          "Critical": {
            "StopConsumer": true
          },
          "Transient": {
            "RestartConsumerAfterMs": 5000
          }
        }
      }
    ]
  }
}
